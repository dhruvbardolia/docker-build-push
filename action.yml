name: "Build and Push Docker Image"
description: "Builds and pushes Docker images to ECR, GCR, ACR, or Docker Hub"

inputs:
  registry:
    required: true
    description: "Registry type: ecr | gcr | acr | dockerhub"

  # Common inputs
  image:
    required: true
    description: "Image name (e.g., my-app)"
  image-version:
    required: true
    description: "Tag/version of the image"
  image-dockerfile:
    required: true
    description: "Path to the Dockerfile"
  args:
    required: false
    description: "Additional build arguments"
  image-previous-version:
    required: false
    description: "Previous image version (for build cache)"

  # AWS ECR
  aws-role:
    required: false
    description: "AWS IAM role to assume"
  aws-region:
    required: false
    description: "AWS region"

  # GCP Artifact Registry
  project-id:
    required: false
    description: "GCP project ID"

  # Docker Hub / ACR / GCR
  username:
    required: false
    description: "Username (Docker Hub / ACR / GCR)"
  password:
    required: false
    description: "Password or token (Docker Hub / ACR / GCR)"
  registry-url:
    required: false
    description: "Custom registry URL (e.g., for ACR)"

outputs:
  image:
    description: "The full image name"
    value: ${{ steps.build.outputs.image }}

runs:
  using: composite

  steps:
    - name: Set up AWS Credentials (if ECR)
      if: ${{ inputs.registry == 'ecr' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: GitHubActionSession
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Registry
      id: login
      shell: bash
      run: |
        REGISTRY_TYPE="${{ inputs.registry }}"
        case "$REGISTRY_TYPE" in
          ecr)
            echo "Logging into AWS ECR..."
            REGISTRY_URL="$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ inputs.aws-region }}.amazonaws.com"
            aws ecr get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin "$REGISTRY_URL"
            echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
            ;;

          gcr)
            echo "Logging into GCR..."
            echo "${{ inputs.password }}" | docker login -u _json_key https://gcr.io --password-stdin
            echo "REGISTRY_URL=gcr.io/${{ inputs.project-id }}" >> $GITHUB_ENV
            ;;

          acr)
            echo "Logging into ACR..."
            echo "${{ inputs.password }}" | docker login ${{ inputs.registry-url }} -u ${{ inputs.username }} --password-stdin
            echo "REGISTRY_URL=${{ inputs.registry-url }}" >> $GITHUB_ENV
            ;;

          dockerhub)
            echo "Logging into Docker Hub..."
            echo "${{ inputs.password }}" | docker login -u ${{ inputs.username }} --password-stdin
            echo "REGISTRY_URL=docker.io" >> $GITHUB_ENV
            ;;

          *)
            echo "❌ Unsupported registry: $REGISTRY_TYPE"
            exit 1
            ;;
        esac

    - name: Build and Push Docker Image
      id: build
      shell: bash
      run: |
        IMAGE_TAG="${{ inputs.image-version }}"
        IMAGE_NAME="${{ inputs.image }}"
        FULL_IMAGE="${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}"

        BUILD_ARGS=$(echo "${{ inputs.args }}" | sed 's/^[ \t]*//' | tr '\n' ' ' | sed 's/[^ ][^ ]*/--build-arg &/g')

        if [[ -n "${{ inputs.image-previous-version }}" ]]; then
          echo "Using cache from previous version..."
          docker buildx build -t "$FULL_IMAGE" $BUILD_ARGS -f "${{ inputs.image-dockerfile }}" . --cache-to type=inline --cache-from type=registry,ref="${{ inputs.image-previous-version }}"
        else
          docker build -t "$FULL_IMAGE" $BUILD_ARGS -f "${{ inputs.image-dockerfile }}" .
        fi

        docker push "$FULL_IMAGE"
        echo "✅ Pushed $FULL_IMAGE"
        echo "image=$FULL_IMAGE" >> $GITHUB_OUTPUT
